<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ulplanet.trip.modules.tms.dao.GroupUserDao">

    <select id="findList" resultType="GroupUser">
        SELECT
            group_user.id,
            group_user.`group`,
            group_user.user,
            group_user.code,
            group_user.type,
            user.name,
            user.gender,
            user.identity_card,
            user.passport,
            user.phone,
            user.email
        FROM
            user
            JOIN group_user ON user.id = group_user.user
        <where>
            group_user.`group` = #{group}
            <if test="name!=null and name!=''">
              AND user.name LIKE CONCAT('%', #{name}, '%')
            </if>
        </where>
        ORDER BY group_user.update_date DESC
    </select>


    <select id="get" resultType="GroupUser">
        SELECT
        group_user.id,
        group_user.`group`,
        group_user.user,
        group_user.code,
        group_user.type,
        user.name,
        user.gender,
        user.identity_card,
        user.passport,
        user.phone,
        user.email
        FROM
        user
        JOIN group_user ON user.id = group_user.user
        <where>
            group_user.`id` = #{id}
        </where>
    </select>

    <insert id="insertGroupUser">
        INSERT INTO group_user(
            id,
            `group`,
            im_token,
            user,
            code,
            type,
            create_by,
            create_date,
            update_date,
            remarks
        ) VALUES (
            #{id},
            #{group},
            #{imToken},
            #{user},
            #{code},
            #{type},
            #{createBy.id},
            #{createDate},
            #{updateDate},
            #{remarks}
        )
    </insert>

    <insert id="insertUser">
        INSERT INTO user(
            id,
            name,
            gender,
            identity_card,
            passport,
            phone,
            email,
            create_by,
            create_date,
            update_date,
            remarks
        ) VALUES (
            #{user},
            #{name},
            #{gender},
            #{identityCard},
            #{passport},
            #{phone},
            #{email},
            #{createBy.id},
            #{createDate},
            #{updateDate},
            #{remarks}
        )
    </insert>

    <update id="updateGroupUser">
        UPDATE group_user SET
            type = #{type},
            update_by = #{updateBy.id},
            update_date = #{updateDate},
            remarks = #{remarks}
        WHERE id = #{id}
    </update>

    <update id="updateUser">
        UPDATE user SET
            name = #{name},
            gender = #{gender},
            identity_card = #{identityCard},
            passport = #{passport},
            phone = #{phone},
            email = #{email},
            update_by = #{updateBy.id},
            update_date = #{updateDate},
            remarks = #{remarks}
        WHERE id = #{user}
    </update>

    <delete id="deleteGroupUser">
        DELETE FROM group_user WHERE id = #{id}
    </delete>

    <delete id="deleteUser">
        DELETE FROM user WHERE id = #{user}
    </delete>

    <select id="findMaxCode" resultType="java.lang.String">
        SELECT
            MAX(CODE)
        FROM
            group_user
        WHERE
            CODE LIKE CONCAT(#{code}, '___')
    </select>

    <select id="findUserByPassport" resultType="GroupUser">
        SELECT
            MAX(`group`.to_date) as toDate,
            MIN(`group`.from_date) as fromDate,
            group_user.id,
            group_user.`group`,
            user.id as `user`,
            user.name,
            user.gender,
            user.identity_card,
            user.passport,
            user.phone,
            user.email
        FROM
            user
            LEFT JOIN group_user ON user.id = group_user.user
            LEFT JOIN `group` ON `group`.id = group_user.group
        <where>
            <if test="id != null and id != ''">
                AND user.passport = #{id}
            </if>
            <if test="group!=null and group!=''">
                AND `group`.id = #{group}
            </if>
        </where>
        group by user.passport

    </select>

    <select id="getUserById"  resultType="GroupUser">
        select `user`.id as user
        from user
        where id = #{id}
    </select>

</mapper>